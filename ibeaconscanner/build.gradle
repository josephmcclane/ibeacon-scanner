apply plugin: 'com.android.library'
apply plugin: 'jacoco'

def projectVersionCodeNr = Integer.parseInt(projectVersionCode);
def libGroupId = libGroupId;

group = libGroupId
version = projectVersion

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode projectVersionCodeNr
        versionName projectVersion
        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'long', 'BEACON_EXIT_TIME_IN_MILLIS', '10L * 1000L'
        buildConfigField 'long', 'ADD_BEACON_TIMEOUT_IN_MILLIS', '375L'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:support-annotations:25.0.0'

    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

configurations {
    deployerJars
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
